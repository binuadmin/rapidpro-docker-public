worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log /dev/stdout warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

http {
    include /etc/nginx/mime.types;
    # fallback in case we can't determine a type
    default_type application/octet-stream;
    access_log off;
    sendfile on;

    # May get confused when docker recreates a server, don't cache lookups for long
    resolver 127.0.0.11 valid=1s;
  
    server {
        listen 8080;
        #listen 8443 ssl http2;

        gzip on;
        gzip_http_version 1.0;
        gzip_comp_level 2;
        gzip_min_length 1100;
        gzip_buffers 4 8k;
        gzip_proxied any;
        gzip_types text/plain text/xml application/xml application/xml+rss text/css text/javascript application/javascript application/json;
        gzip_static on;
        gzip_proxied expired no-cache no-store private auth;

        client_max_body_size 1G;
        keepalive_timeout 60;
        send_timeout 60;

        # all courier URLs go to courier
        location ^~ /c/ {
            proxy_set_header Host $http_host;

            # per https://serverfault.com/a/593003 and https://stackoverflow.com/questions/50248522/nginx-will-not-start-with-host-not-found-in-upstream
            set $backend http://courier:8080;
            proxy_pass $backend;
            break;
        }

        # all Mailroom URLs go to Mailroom
        location ^~ /mr/ {
            proxy_set_header Host $http_host;
            set $backend http://mailroom:8090;
            proxy_pass $backend;
            break;
        }

        # Serve the compiled static data directly rather than going to rapidpro
        location ^~ /sitestatic/ {
            root /var/www/rapidpro/;
        }

        location / {
            proxy_set_header Host $http_host;
            set $backend http://rapidpro:8000;
            proxy_pass $backend;
            proxy_pass_request_headers on;
        }
    }
}
